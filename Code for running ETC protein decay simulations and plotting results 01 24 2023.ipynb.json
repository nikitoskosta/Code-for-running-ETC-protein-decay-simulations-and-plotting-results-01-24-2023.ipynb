{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cdd9c175",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Author: Nikita Tsyba\n",
    "#Purpose: simulate ETC protein decay and plot simulation results along with K50 values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "77cc6071",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import the required modules and functions\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "160ca276",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Read-in ETC protein half-life values\n",
    "    #Note: the data is in the same format as presented in Table 1 of Karunadharma et al (2015) manuscript (DOI: 10.1096/fj.15-272666)\n",
    "\n",
    "path = \"path_to_csv_file\"\n",
    "half_lives = pd.read_csv(path, index_col=\"Age/treatment\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d364d69b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Clean the dataset, remove unneccessary columns \n",
    "\n",
    "#Drop columns\n",
    "cols_drop = [\"Treatment averag;e % of YCL\", \"Unnamed: 9\"] #specifies columns to drop\n",
    "half_lives = half_lives.drop(axis=1, columns = cols_drop) #drops unnecessary columns\n",
    "\n",
    "#Flip index and column axes\n",
    "#half_lives = half_lives.rename_axis(\"Tissue_types\") #renames the index axis (optional)\n",
    "half_lives = half_lives.transpose() #flips column and index axes\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "44aad0c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HT    24.1 � 1.2\n",
      "HM    20.3 � 0.8\n",
      "LT     4.5 � 0.2\n",
      "LM     4.8 � 0.2\n",
      "BT    23.7 � 1.0\n",
      "EM    27.6 � 1.7\n",
      "SM    24.5 � 1.6\n",
      "Name: YCL, dtype: object\n",
      "\n",
      "Processed YCL data:\n",
      "    half_life\n",
      "HT       24.1\n",
      "HM       20.3\n",
      "LT        4.5\n",
      "LM        4.8\n",
      "BT       23.7\n",
      "EM       27.6\n",
      "SM       24.5\n"
     ]
    }
   ],
   "source": [
    "#Data cleaning: remove unneccessary characters from the data points, convert the data to float\n",
    "    \n",
    "#remove unneccessary characters from the data points\n",
    "    #Use Regex to get rid of them\n",
    "        #Extract porions of the strings with the following pattern\n",
    "            #pattern = r\"line_start-->digits or dots-->Space\"\n",
    "                #Extract just this pattern and save it to your df\n",
    "        \n",
    "pattern = r\"(^[\\d\\.]+) \" #pattern exlanation: r\"Capture_group_opens-->line_start--> multiple digits or dots-->Empty_Space-->Capture_group_closes\"\n",
    "\n",
    "#Select the data from young control animals (YCL data) for further analysis\n",
    "ycl = half_lives[\"YCL\"]\n",
    "print(ycl)\n",
    "\n",
    "#Remove unneccessary characters from the data AND convert the data to numerical form\n",
    "ycl = ycl.str.extract(pattern).astype(\"float\").rename({0: \"half_life\"}, axis=1) #extracts just the characters of interest from the str + converts data to float type + renames the column\n",
    "print(\"\\nProcessed YCL data:\")\n",
    "print(ycl)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3c798bc7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    half_life  decay_rate\n",
      "HT       24.1    0.028755\n",
      "HM       20.3    0.034138\n",
      "LT        4.5    0.154000\n",
      "LM        4.8    0.144375\n",
      "BT       23.7    0.029241\n",
      "EM       27.6    0.025109\n",
      "SM       24.5    0.028286\n"
     ]
    }
   ],
   "source": [
    "#Calculate the degradation rate (decay rate) constant from half-lives:\n",
    "\n",
    "#Half-life to rate constant conversion formula, where \"k\" = rate constant:\n",
    "#k = 0.693 / t½ \n",
    "\n",
    "\n",
    "ycl[\"decay_rate\"] = 0.693 / ycl[\"half_life\"]\n",
    "print(ycl)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f929f763",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'low_rate': 0.02910560680469531, 'high_rate': 0.1491875}\n"
     ]
    }
   ],
   "source": [
    "#Calculating low (slow) and high (fast) decay rates\n",
    "\n",
    "mean_rates = {} #a dict storing mean rate values\n",
    "\n",
    "\n",
    "mean_rates[\"low_rate\"] = ycl.loc[ycl[\"decay_rate\"] < 0.05, \"decay_rate\"].mean()\n",
    "mean_rates[\"high_rate\"] = ycl.loc[ycl[\"decay_rate\"] > 0.05, \"decay_rate\"].mean()\n",
    "\n",
    "print(mean_rates)\n",
    "\n",
    "\n",
    "#Decay rate unit = population unit (in our case percentages) / day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b47b33b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create a function for simulating protein decay\n",
    "\n",
    "#Define a function that will perform the simulations\n",
    "def sim_etc_decay(rate, rate_name, end_time):\n",
    "    '''\n",
    "    Simulates ETC protein decay. Accepts rate, end_time as numerical data, rate_name as string data.\n",
    "    Returns a Data Frame containing time point data and simulation results in separate columns\n",
    "    '''\n",
    "    data = {} #empty dict that will store simulation data\n",
    "    etc_content = 100 #specifies initial ETC content and keeps track of changes in it\n",
    "    time = range(0,end_time,1) #time range in days\n",
    "    if etc_content >= 0: #we dont want for etc_content to drop below 0\n",
    "        for t in time: #assigns the starting etc_content at t = 0 \n",
    "            if t == 0:\n",
    "                data[t] = etc_content\n",
    "            else: #assigns subsequent etc_content values to t > 0\n",
    "                etc_content = etc_content - etc_content * rate #calculates new etc content for each time point\n",
    "                data[t] = etc_content #saves simulation result and associated timepoint to the dict\n",
    "        data_df = pd.DataFrame(data.items(), columns=[\"time\"+\"_\"+rate_name, \"etc_content\"+\"_\"+rate_name]) #converts dictionary into a df + defines column names \n",
    "    return data_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4715aad9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empty DataFrame\n",
      "Columns: []\n",
      "Index: []\n"
     ]
    }
   ],
   "source": [
    "#Run simulations and generate data\n",
    "sim_data = pd.DataFrame() #empty df that will store simulation data\n",
    "\n",
    "\n",
    "low_rate_data = sim_etc_decay(mean_rates[\"low_rate\"], \"low_rate\", 130)\n",
    "high_rate_data = sim_etc_decay(mean_rates[\"high_rate\"], \"high_rate\", 50) \n",
    "\n",
    "print(sim_data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "761bd208",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-10-34dbf27d2c82>:32: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax1.set_xticklabels(xlabels_str, fontdict={'fontsize': 25,'fontweight':\"bold\"})\n",
      "<ipython-input-10-34dbf27d2c82>:36: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax1.set_yticklabels(ylabels_str, fontdict={'fontsize': 25,'fontweight':\"bold\"}, minor=False)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[Text(0, 0.0, '0'),\n",
       " Text(0, 20.0, '20'),\n",
       " Text(0, 40.0, '40'),\n",
       " Text(0, 60.0, '60'),\n",
       " Text(0, 80.0, '80'),\n",
       " Text(0, 100.0, '100')]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the graphs with hlines representing K50 values\n",
    "    #Note: plotting should be done using OO interface\n",
    "\n",
    "\n",
    "fig, (ax1) = plt.subplots(nrows=1, ncols=1, figsize=(20,15))\n",
    "\n",
    "ax1.plot(low_rate_data[\"time_low_rate\"], low_rate_data[\"etc_content_low_rate\"], linewidth = 3.5)\n",
    "ax1.plot(high_rate_data[\"time_high_rate\"], high_rate_data[\"etc_content_high_rate\"], linewidth = 3.5)\n",
    "\n",
    "ax1.set_xlim(0,130) #low rate data has higher xlim due to slower decay rate\n",
    "\n",
    "axes = [ax1]\n",
    "for ax in axes:\n",
    "    ax.set_ylim(0,100) #sets identical ylim for both graphs\n",
    "    ax.axhline(11.9, ls=\"dashed\", color=\"grey\", linewidth = 3.5) #Median K50\n",
    "    ax.axhline(35.9, ls=\"dashed\", color=\"grey\", linewidth = 3.5) #Max K50\n",
    "    ax.axhline(1.5, ls=\"dashed\", color=\"grey\", linewidth = 3.5) #Min K50\n",
    "\n",
    "#Customize ticks for Low decay rate graph\n",
    "ax1.set_xticks(range(0,120,5), minor=True) #sets minor ticks on x axis every 5 days\n",
    "ax1.tick_params(axis='x',which='minor',direction='out',bottom=True,length=5) #specifies the length of minor ticks\n",
    "ax1.tick_params(axis='x',which='major',direction='out',bottom=True,length=8) #specifies the length of major ticks\n",
    "\n",
    "#ax1.set_yticks(range(0,110,10), minor=False) #sets major ticks on y axis \n",
    "ax1.set_yticks(range(0,100,5), minor=True) #sets minort ticks on y axis \n",
    "ax1.tick_params(axis='y',which='minor',direction='out',bottom=True,length=5) #specifies the length of minor ticks\n",
    "ax1.tick_params(axis='y',which='major',direction='out',bottom=True,length=8) #specifies the length of major ticks\n",
    "\n",
    "#Customize tick labels for Low decay rate graph: enlarge the tick labels\n",
    "xlabels = range(0,140, 20) #creates a list of int labels\n",
    "xlabels_str = map(str, xlabels) #converts int list to strings, so that they can be passed to ax1.set_xticklabels() function\n",
    "ax1.set_xticklabels(xlabels_str, fontdict={'fontsize': 25,'fontweight':\"bold\"})\n",
    "\n",
    "ylabels = range(0,110, 10) #creates a list of int labels\n",
    "ylabels_str = map(str, xlabels) #converts int list to strings, so that they can be passed to ax1.set_xticklabels() function\n",
    "ax1.set_yticklabels(ylabels_str, fontdict={'fontsize': 25,'fontweight':\"bold\"}, minor=False)\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
